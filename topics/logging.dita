<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Setting up logging</title>
	<conbody>
		<p>The Couchbase Java SDK has no hard dependency on a specific logger implementation. It tries to find one on the classpath and uses it if supported. If no logger implementation is found, the standard JDK logger is used.</p>

		<p>The following loggers are supported (and tried in this order):</p>

		<ol>
			<li>SLF4J</li>
			<li>Log4J</li>
			<li>JDK Logger (java.util.logging)</li>
		</ol>

		<section>
			<title>Configuring SLF4J</title>


		<p>To enable SLF4J, put it on the classpath, as well as one of the support logger implementations (like logback). If you want to use logback and include logback-classic, it will be pulled in automatically:</p>

<codeblock outputclass="language-java"><![CDATA[<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.1.2</version>
</dependency>]]></codeblock>

		<p>By default, the log level for logback is set to DEBUG, but with the addition of a logback configuration this can be configured (for example, as a "logback.xml" in the resources folder):</p>

<codeblock outputclass="language-java"><![CDATA[<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="info">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>]]></codeblock>

		<p>Please consult the SLF4J documentation for advanced configuration.</p>

		</section>

		<section>
			<title>Configuring Log4J</title>

			<p>Log4J is also automatically found when put on the classpath:</p>

<codeblock outputclass="language-java"><![CDATA[<dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
</dependency>]]></codeblock>

<p>If no configuration is applied, the following message will appear:</p>

<codeblock outputclass="language-java"><![CDATA[log4j:WARN No appenders could be found for logger (com.couchbase.client.core.logging.CouchbaseLoggerFactory).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.]]></codeblock>

<p>This log4j.xml sets it to INFO level:</p>

<codeblock outputclass="language-java"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'>
    <appender name="CA" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%-4r [%t] %-5p %c %x - %m%n" />
        </layout>
    </appender>
    <root>
        <level value="info" />
        <appender-ref ref="CA" />
    </root>
</log4j:configuration>]]></codeblock>

<p>Alternatively, you can provide a log4j.properties file with similar settings:</p>

<codeblock outputclass="language-java"><![CDATA[log4j.rootLogger=INFO, CA
log4j.appender.CA=org.apache.log4j.ConsoleAppender
log4j.appender.CA.layout=org.apache.log4j.PatternLayout
log4j.appender.CA.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n]]></codeblock>

<p>Please consult the Log4J docmentation for more information and advanced configuration options.</p>
		</section>

		<section>
			<title>Configuring the JDK Logger</title>

			<p>If no logging library is found on the classpath, the JDK logger (also known as JUL from java.util.logging) is used as a fallback.</p>

			<p>By default it logs INFO level and above, if you want to set it to DEBUG (or the JUL equivalent: Fine) you can do it like this programmatically (before initializing the CouchbaseCluster):</p>

<codeblock outputclass="language-java"><![CDATA[Logger logger = Logger.getLogger("com.couchbase.client");
logger.setLevel(Level.FINE);
for(Handler h : logger.getParent().getHandlers()) {
    if(h instanceof ConsoleHandler){
        h.setLevel(Level.FINE);
    }
}]]></codeblock>

			<p>It is recommended to not use JUL in production, because SLF4J and/or Log4J provide much better configurability and performance.</p>
		</section>

		<section>
			<title>Manual Overriding</title>

			<p>If different loggers are on the Classpath and you want to force a different one (for example Log4J instead of SLF4J) you can set the default one directly:</p>

<codeblock outputclass="language-java"><![CDATA[CouchbaseLoggerFactory.setDefaultFactory(new Log4JLoggerFactory());]]></codeblock>

		</section>

	</conbody>
</concept>