<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Working with N1QL</title>
	<shortdesc>Explains how to Query a bucket using the N1QL query language.</shortdesc>
	<conbody>
		<p><note>N1QL is currently experimental and may change in subsequent versions.</note></p>

		<p>You need to make sure to have the query engine downloaded, started and pointed to your cluster. Fore more information, visit http://query.couchbase.com.</p>

		<p>Next, you need to enable it either through a system property or through the environment builder. This step will go away once N1QL is fully integrated into the server:</p>

<codeblock outputclass="language-java"><![CDATA[// Through a system property
System.setProperty("com.couchbase.queryEnabled", "true");

Cluster cluster = CouchbaseCluster.create();
Bucket bucket = cluster.openBucket("beer-sample").toBlocking().single();]]></codeblock>


<codeblock outputclass="language-java"><![CDATA[// Through the builder
Cluster cluster = CouchbaseCluster.create(DefaultCouchbaseEnvironment
    .builder()
    .queryEnabled(true)
    .build());

Bucket bucket = cluster.openBucket("beer-sample").toBlocking().single();]]></codeblock>

		<p>Finally, you can run a query using either raw N1QL strings or a DSL API:</p>

<codeblock outputclass="language-java"><![CDATA[// raw string query
Observable<QueryResult> query = bucket.query("SELECT * FROM beer-sample LIMIT 10");

// using the DSL
Observable<QueryResult> query = bucket.query(select("*").from("beer-sample").limit(10));]]></codeblock>

		<p>The select() method is a static import which kicks off a BNF (syntax) aware DSL for N1QL. It provides a typesafe and intuitive way to perform queries.</p>

		<p>The query always returns a QueryResult, which aside from the actual QueryRows also contains debug or error information if supplied.</p>

		<ul>
			<li><b>rows</b>: Contains all rows returned by the query, can be an empty Observable.</li>
			<li><b>info</b>: Contains info-level JSON output from the server to debug the query (if success).</li>
			<li><b>success</b>: shorthand identifier to see if the query was a success.</li>
			<li><b>error</b>: If the query was not successful, contains a JsonObject identifying the error.</li>
		</ul>

		<p>The following code prints the found documents and an error if it failed:</p>

<codeblock outputclass="language-java"><![CDATA[bucket
    .query(select("*").from("beer-sample").limit(10))
    .doOnNext(result -> {
        if (!result.success()) {
            System.err.println(result.error());
        }
    })
    .flatMap(QueryResult::rows)
    .toBlocking()
    .forEach(row -> System.out.println(row.value()));]]></codeblock>

	</conbody>
</concept>