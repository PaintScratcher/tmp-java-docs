<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Deleting Documents</title>
	<shortdesc>Describes how to delete documents using the <codeph>remove()</codeph> method.</shortdesc>
	<conbody>

		<section>
			<title>Removing</title>

			<p>You can remove a document by utilizing the <codeph>remove()</codeph> method.</p>

<codeblock outputclass="language-java"><![CDATA[// Remove the document by its ID.
Observable<JsonDocument> doc = bucket.remove("id");]]></codeblock>

			<p>The returned <codeph>Document</codeph> only has the <codeph>id</codeph> populated, all other fields are set to their default values.</p>

		</section>

		<section>
			<title>Durability Requirements</title>

			<p>If no durability requirements are set on the <codeph>remove</codeph> method, the operation will succeed when the server acknowledges the document delete in its managed cache layer. While this is a performant operation, there might be situations where you want to make sure that your document deletion has been persisted and/or replicated so that it survives power outages and other node failures.</p>

			<p>The remove method provides overloads to supply such requirements:</p>

<codeblock outputclass="language-java"><![CDATA[Observable<D> remove(String id, PersistTo persistTo);
Observable<D> remove(String id, ReplicateTo replicateTo);
Observable<D> remove(String id, PersistTo persistTo, ReplicateTo replicateTo);

Observable<D> remove(D document, PersistTo persistTo);
Observable<D> remove(D document, ReplicateTo replicateTo);
Observable<D> remove(D document, PersistTo persistTo, ReplicateTo replicateTo);]]></codeblock>

			<p>You can configure either just one or both of the requirements when removing. From an application point of view nothing needs to be changed when working with the response, although there is something that need to be kept in mind:</p>

			<p>The internal implementation first performs a regular <codeph>remove</codeph> operation and afterwards starts polling the specific affected cluster nodes for the state of the document. If something fails during this operation (and failing the <codeph>Observable</codeph>), the original operation might have succeeded nonetheless.</p>

<codeblock outputclass="language-java"><![CDATA[// Remove the document and make sure the delete is persisted.
Observable<JsonDocument> doc = bucket.remove("id", PersistTo.MASTER);

// Remove the document and make sure the delete is replicated.
Observable<JsonDocument> doc = bucket.remove("id", ReplicateTo.ONE);

// Remove the document and make sure the delete is persisted and replicated.
Observable<JsonDocument> doc = bucket.remove("id", PersistTo.MASTER, ReplicateTo.ONE);]]></codeblock>

		</section>

	</conbody>
</concept>